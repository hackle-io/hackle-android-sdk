name: Create Prerelease

on:
  push:
    tags:
      - '*.*.*'

jobs:
  create-prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate tag format
        id: validate_tag
        run: |
          TAG_NAME="${{ github.ref_name }}"
          echo "Tag: $TAG_NAME"
          
          if [[ ! "$TAG_NAME" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Tag '$TAG_NAME' does not match x.y.z format"
            exit 1
          fi
          
          echo "Tag format is valid: $TAG_NAME"
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Verify version matches gradle.properties
        run: |
          TAG_VERSION="${{ steps.validate_tag.outputs.version }}"
          SDK_VERSION=$(grep 'sdk_version=' gradle.properties | sed -E 's/sdk_version=([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          
          echo "Tag version: $TAG_VERSION"
          echo "SDK version: $SDK_VERSION"
          
          if [ "$TAG_VERSION" != "$SDK_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match gradle.properties version ($SDK_VERSION)"
            exit 1
          fi
          
          echo "Version verification passed"

      - name: Create prerelease
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT }} 
          script: |
            const tagName = '${{ steps.validate_tag.outputs.version }}';
            
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: tagName,
                prerelease: true,
                generate_release_notes: true
              });
              
              console.log(`Prerelease created successfully for tag: ${tagName}`);
              console.log(`Release ID: ${response.data.id}`);
              console.log(`Release URL: ${response.data.html_url}`);
            } catch (error) {
              if (error.status === 422 && error.response.data.errors?.[0]?.code === 'already_exists') {
                console.log(`Release for tag ${tagName} already exists`);
              } else {
                throw error;
              }
            }
