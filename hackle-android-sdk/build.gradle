plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

group = 'io.hackle'
version = sdk_version

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        versionCode 1
        versionName version

        buildConfigField "String", "VERSION_NAME", "\"$version\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "hackle-proguard-rules.pro"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

def hasLocalSdk = getLocalProperty('hackle.java.sdk.path') != null

dependencies {
    // if hackle.java.sdk.path exist in local.properties, use local hackle-sdk-common and hackle-sdk-core
    if(hasLocalSdk)  {
        debugApi "io.hackle:hackle-sdk-common"
        debugImplementation "io.hackle:hackle-sdk-core"

        releaseApi "io.hackle:hackle-sdk-common:2.27.0"
        releaseImplementation "io.hackle:hackle-sdk-core:2.27.0"
    } else {
        api "io.hackle:hackle-sdk-common:2.27.0"
        implementation "io.hackle:hackle-sdk-core:2.27.0"
    }


    implementation 'com.squareup.okhttp3:okhttp:3.12.2'
    implementation "com.google.android.gms:play-services-base:17.3.0"
    implementation "com.google.code.gson:gson:2.8.6"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    compileOnly "com.google.firebase:firebase-messaging:23.0.8"

    implementation 'com.github.bumptech.glide:glide:4.11.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.12.0"
    testImplementation 'io.strikt:strikt-core:0.32.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml {
            enabled = true
        }
        html {
            enabled = true
        }
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = ['src/main/java']

    sourceDirectories.setFrom(files(mainSrc))
    classDirectories.setFrom(files([javaTree, kotlinTree]))
    executionData.setFrom(fileTree(dir: "${project.buildDir}/jacoco/testDebugUnitTest.exec"))
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourceJar

                pom {
                    name = project.name
                    description = 'Hackle Android Sdk'
                    url = 'http://www.hackle.io'

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            name = 'Hackle'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/hackle-io/hackle-android-sdk.git'
                        developerConnection = 'scm:git:https://github.com/hackle-io/hackle-android-sdk.git'
                        url = 'https://github.com/hackle-io/hackle-android-sdk'
                    }
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

def getLocalProperty(String key) {
    if (key == null) {
        return null
    }

    Properties properties = new Properties()
    def localProperties = file("local.properties")
    if (localProperties.exists()) {
        properties.load(localProperties.newDataInputStream())
        return properties.getProperty(key)
    }
    return null
}
